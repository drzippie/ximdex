<?xml version="1.0" encoding="utf-8" ?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="xml" encoding="utf-8" indent="no"/>

<!--
	dexT to XSLT translation: 
	- Searchs dext and html elements and process each on different templates
	- Process text nodes and attributes
	- Param ximdex_root_path is received as php param

	warning: params in xsl:include are forbidden
-->

<xsl:param name="ximdex_root_path"/>
<xsl:param name="ptds_path"/>
<xsl:param name="vars_list"/>

<xsl:include href="__ABSOLUTE_PATH__/dext_ifcondition.xsl"/>
<xsl:include href="__ABSOLUTE_PATH__/dext_ifexists.xsl"/>
<xsl:include href="__ABSOLUTE_PATH__/dext_ifequals.xsl"/>
<xsl:include href="__ABSOLUTE_PATH__/dext_ifcontains.xsl"/>
<xsl:include href="__ABSOLUTE_PATH__/dext_include.xsl"/>
<xsl:include href="__ABSOLUTE_PATH__/dext_foreach.xsl"/>
<xsl:include href="__ABSOLUTE_PATH__/dext_root_node.xsl"/>
<xsl:include href="__ABSOLUTE_PATH__/dext_auxiliary.xsl"/>
<xsl:include href="__ABSOLUTE_PATH__/dext_var_body.xsl"/>
<xsl:include href="__ABSOLUTE_PATH__/dext_calltemplate.xsl"/>
<xsl:include href="__ABSOLUTE_PATH__/dext_import.xsl"/>
<xsl:include href="__ABSOLUTE_PATH__/dext_runme.xsl"/>
<xsl:include href="__ABSOLUTE_PATH__/dext_variables.xsl"/>
<xsl:include href="__ABSOLUTE_PATH__/dext_getvalue.xsl"/>

<xsl:template match="*">
	<xsl:choose>	
		<xsl:when test="namespace-uri(.)='http://www.ximdex.com'">
			<xsl:call-template name="process_dext_node"/>
		</xsl:when>
		<xsl:when test="namespace-uri(.)='http://www.w3.org/TR/html401'">
			<xsl:call-template name="process_html_node"/>
		</xsl:when>
		<xsl:otherwise>    
			<xsl:apply-templates/>
		</xsl:otherwise>    
	</xsl:choose>		
</xsl:template>

<xsl:template name="process_dext_node">
	<xsl:choose>	
		<xsl:when test="local-name(.)='ifcontains'">
			<xsl:call-template name="ifcontains"/>
		</xsl:when>
		<xsl:when test="local-name(.)='ifexists'">
			<xsl:call-template name="ifexists"/>
		</xsl:when>
		<xsl:when test="local-name(.)='ifcondition'">
			<xsl:call-template name="ifcondition"/>
		</xsl:when>
		<xsl:when test="local-name(.)='else'">
			<xsl:call-template name="else"/>
		</xsl:when>
		<xsl:when test="local-name(.)='ifequals'">
			<xsl:call-template name="ifequals"/>
		</xsl:when>
		<xsl:when test="local-name(.)='import'">
			<xsl:call-template name="import"/>
		</xsl:when>
		<xsl:when test="local-name(.)='foreach'">
			<xsl:call-template name="foreach"/>
		</xsl:when>
		<xsl:when test="local-name(.)='var_body'">
			<xsl:call-template name="var_body"/>
		</xsl:when>
		<xsl:when test="local-name(.)='applytemplates'">
			<xsl:call-template name="applytemplates"/>
		</xsl:when>
		<xsl:when test="local-name(.)='calltemplate'">
			<xsl:call-template name="calltemplate"/>
		</xsl:when>
		<xsl:when test="local-name(.)='runme'">
			<xsl:call-template name="runme"/>
		</xsl:when>
		<xsl:when test="local-name(.)='getvalue'">
			<xsl:call-template name="getvalue"/>
		</xsl:when>
		<xsl:otherwise>    
			<xsl:call-template name="root_node"/>
		</xsl:otherwise>
	</xsl:choose>
</xsl:template>

<xsl:template name="process_html_node">
	<xsl:choose>	
		<xsl:when test="local-name(.)='cdata_section'">
			<xsl:text disable-output-escaping = "yes">&lt;![CDATA[&lt;</xsl:text>
			<xsl:value-of select="."/>
			<xsl:text disable-output-escaping = "yes">&gt;]]&gt;</xsl:text>
		</xsl:when>
		<xsl:otherwise>
			<xsl:element name="{local-name(.)}">
				<xsl:apply-templates select="@*"/>
				<xsl:apply-templates/>
			</xsl:element>
		</xsl:otherwise>
	</xsl:choose>
</xsl:template>

<xsl:template match="@*">
	<xsl:attribute name="{local-name(.)}"><xsl:value-of select="."/></xsl:attribute>
</xsl:template>

<xsl:template match="text()">
	<xsl:if test="not(contains(.,'DOCTYPE'))">
		<xsl:value-of select="."/>
	</xsl:if>	
</xsl:template>

<xsl:template match="comment()">
	<xsl:choose>
		<xsl:when test="contains(.,'[CDATA]')">
			<xsl:text disable-output-escaping = "yes">&lt;xsl:text disable-output-escaping=&quot;yes&quot;&gt;&lt;![CDATA[</xsl:text>
			<xsl:if test="contains(substring-after(.,'[CDATA]'), 'html:')">
				<xsl:call-template name="globalReplace">
				<xsl:with-param name="outputString" select="substring-after(.,'[CDATA]')"/>
				<xsl:with-param name="target" select="'html:'"/>
				<xsl:with-param name="replacement" select="''"/>
				</xsl:call-template>
			</xsl:if>
			<xsl:if test="not(contains(substring-after(.,'[CDATA]'), 'html:'))">
				<xsl:value-of disable-output-escaping="yes" select="substring-after(.,'[CDATA]')"/>
			</xsl:if>
			<xsl:text disable-output-escaping = "yes">]]&gt;&lt;/xsl:text&gt;</xsl:text>
		</xsl:when>		
		<xsl:otherwise>
			<xsl:text disable-output-escaping = "yes">&lt;!--</xsl:text>
				<xsl:value-of select="."/>
			<xsl:text disable-output-escaping = "yes">--&gt;</xsl:text>
		</xsl:otherwise>
	</xsl:choose>
</xsl:template>

<xsl:template name="globalReplace">
	<xsl:param name="outputString"/>
	<xsl:param name="target"/>
	<xsl:param name="replacement"/>
	<xsl:choose>
		<xsl:when test="contains($outputString,$target)">
			<xsl:value-of disable-output-escaping="yes" select="concat(substring-before($outputString,$target),$replacement)"/>
			<xsl:call-template name="globalReplace">
				<xsl:with-param name="outputString" select="substring-after($outputString,$target)"/>
				<xsl:with-param name="target" select="$target"/>
				<xsl:with-param name="replacement" select="$replacement"/>
			</xsl:call-template>
		</xsl:when>
		<xsl:otherwise>
			<xsl:value-of disable-output-escaping="yes" select="$outputString"/>
		</xsl:otherwise>
	</xsl:choose>
</xsl:template>

</xsl:stylesheet>
